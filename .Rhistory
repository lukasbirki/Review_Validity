(group == "Party Politics" & source == "Others") ~ "Various (Party Politics)",
(group == "Social Media" & source == "Others")  ~ "Various (Social Media)",
T ~ source)) %>%
ggplot(aes(x=reorder(source,-rowid), y = n, fill = group)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_x_discrete(labels = label_wrap(15))+
labs(title = "a) Text Source", y = "n") +
scale_fill_manual(name = "Type",values = c("#ef3b2c","#662506","#a6cee3","#fb9a99"))+
theme_Publication() +
theme(legend.position = "top",legend.direction="horizontal", legend.title = element_text(size = 13,face = "bold"),
axis.title.y = element_blank(),
axis.title.x = element_blank()) -> barchart_source
df %>%
mutate(language_combined = case_when(
language == "English"~ language,
T ~ language_others)) %>%
separate_rows(language_combined,sep = ",") %>% mutate(language_combined = trimws(language_combined)) -> df_temp
df_temp%>%
count(language_combined) %>% left_join(df_temp, ., by = "language_combined") %>%
mutate(language_combined = case_when(
(n > 2) ~ language_combined,
(n <=2) ~ "Others")) %>%
ggplot(aes(x=reorder(language_combined, table(language_combined)[language_combined]),fill = factor(language_combined))) +
geom_bar() +
coord_flip() +
labs(title = "b) Data Languages",x = "Language", y = "n", fill = "Language") +
theme_Publication()+
scale_fill_Publication()+
theme(axis.title.y = element_blank(),legend.position = "none") -> barchart_language
df %>%
separate_rows(method_type,sep = ",") %>% mutate(method_type = trimws(method_type)) %>%
mutate(method_short = case_when(
startsWith(as.character(method_type),"Super") ~ "Supervised",
startsWith(as.character(method_type),"Unsuper") ~ "Unsupervised",
startsWith(as.character(method_type),"Rule") ~ "Dictionary",
T ~ NA_character_)) %>%
count(method_short,construct_new) %>%
drop_na(method_short) %>%
ggplot(aes(method_short,construct_new, fill= n)) +
geom_tile() +
geom_text(aes(label = n),size = 4,fontface  = "bold",color = "white")+
labs(title = "c) Construct and Method Type", fill = "n") +
theme_Publication() + scale_fill_gradient2()+
scale_x_discrete(labels = label_wrap(15))+
scale_y_discrete(labels = label_wrap(20))+
theme(legend.direction = "vertical",legend.position = "right",
legend.key.size= unit(0.5, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank())  -> tile_type_topic
ggpubr::ggarrange(ggpubr::ggarrange(barchart_source,barchart_language,nrow=2,align = "v",heights = c(1.2,1)),tile_type_topic,nrow = 1) -> souce_overview
ggsave(plot =souce_overview ,filename = "Review/3_plots/output/overview_descriptive.png",width = 12, height = 9,dpi = 300)
df %>%
mutate(language_combined = case_when(
language == "English"~ language,
T ~ language_others)) %>%
separate_rows(language_combined,sep = ",") %>% mutate(language_combined = trimws(language_combined)) -> df_temp
df_temp%>%
count(language_combined) %>% left_join(df_temp, ., by = "language_combined") %>%
mutate(language_combined = case_when(
(n > 2) ~ language_combined,
(n <=2) ~ "Others"))
df %>%
mutate(language_combined = case_when(
language == "English"~ language,
T ~ language_others)) %>%
separate_rows(language_combined,sep = ",") %>% mutate(language_combined = trimws(language_combined)) -> df_temp
df_temp%>%
count(language_combined) %>% left_join(df_temp, ., by = "language_combined") %>%
mutate(language_combined = case_when(
(n > 2) ~ language_combined,
(n <=2) ~ "Others")) |>  distinct(language_combindes)
df %>%
mutate(language_combined = case_when(
language == "English"~ language,
T ~ language_others)) %>%
separate_rows(language_combined,sep = ",") %>% mutate(language_combined = trimws(language_combined)) -> df_temp
df_temp%>%
count(language_combined) %>% left_join(df_temp, ., by = "language_combined") %>%
mutate(language_combined = case_when(
(n > 2) ~ language_combined,
(n <=2) ~ "Others")) |>  distinct(language_combined)
df %>%
mutate(language_combined = case_when(
language == "English"~ language,
T ~ language_others)) %>%
separate_rows(language_combined,sep = ",") %>% mutate(language_combined = trimws(language_combined)) -> df_temp
df_temp%>%
count(language_combined) %>% left_join(df_temp, ., by = "language_combined") %>%
mutate(language_combined = case_when(
(n > 2) ~ language_combined,
(n <=2) ~ "Others")) |>  distinct(language_combined,n)
df %>%
mutate(language_combined = case_when(
language == "English"~ language,
T ~ language_others)) %>%
separate_rows(language_combined,sep = ",") %>% mutate(language_combined = trimws(language_combined)) -> df_temp
df_temp%>%
count(language_combined) %>% left_join(df_temp, ., by = "language_combined") %>%
mutate(language_combined = case_when(
(n > 2) ~ language_combined,
(n <=2) ~ "Others")) |>  distinct(language_combined,n) |> sum(n)
df %>%
mutate(language_combined = case_when(
language == "English"~ language,
T ~ language_others)) %>%
separate_rows(language_combined,sep = ",") %>% mutate(language_combined = trimws(language_combined)) -> df_temp
df_temp%>%
count(language_combined) %>% left_join(df_temp, ., by = "language_combined") %>%
mutate(language_combined = case_when(
(n > 2) ~ language_combined,
(n <=2) ~ "Others")) |>  distinct(language_combined,n) |> sum(_$n)
df %>%
mutate(language_combined = case_when(
language == "English"~ language,
T ~ language_others)) %>%
separate_rows(language_combined,sep = ",") %>% mutate(language_combined = trimws(language_combined)) -> df_temp
df_temp%>%
count(language_combined) %>% left_join(df_temp, ., by = "language_combined") %>%
mutate(language_combined = case_when(
(n > 2) ~ language_combined,
(n <=2) ~ "Others")) |>  nrow()
65/96
## Validation Type (specific) ----
unique(df_qual$category_general) -> types
df_qual |>
group_by(category_specific,method_short) |>
mutate(n_specific = n()) |>
ungroup() |>
distinct(method_short, category_general, category_specific, n_specific) -> df_validation_specific
df_validation_specific |>
filter(category_general == types[1]) |>
ggplot(aes(x=reorder(category_specific,n_specific), y = n_specific, fill = method_short)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
ylim(0,15)+
labs(title = "Content Validation")+
theme_Publication() + scale_fill_Publication(name = "Method Type") +
theme(legend.direction = "horizontal",legend.position = "right",
legend.key.size= unit(0.8, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank())  -> p_content
df_validation_specific |>
filter(category_general == types[2]) |>
ggplot(aes(x=reorder(category_specific,n_specific), y = n_specific, fill = method_short)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
ylim(0,15)+
labs(title = "Output Validation: Criterion Data")+
theme_Publication() + scale_fill_Publication(name = "Method Type") +
theme(legend.direction = "horizontal",legend.position = "right",
legend.key.size= unit(0.8, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank()) -> p_criterion
df_validation_specific |>
filter(category_general == types[4]) |>
ggplot(aes(x=reorder(category_specific,n_specific), y = n_specific, fill = method_short)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
ylim(0,15)+
labs(title = "Robustness Analysis")+
theme_Publication() + scale_fill_Publication(name = "Method Type") +
theme(legend.direction = "horizontal",legend.position = "right",
legend.key.size= unit(0.8, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank()) -> p_Robust
df_validation_specific |>
filter(category_general == types[5]) |>
ggplot(aes(x=reorder(category_specific,n_specific), y = n_specific, fill = method_short)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
ylim(0,50)+
labs(title = "Output Validation: Human Labels")+
theme_Publication() + scale_fill_Publication(name = "Method Type") +
theme(legend.direction = "horizontal",legend.position = "right",
legend.key.size= unit(0.8, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank()) -> p_human
df_validation_specific |>
filter(category_general == types[6]) |>
ggplot(aes(x=reorder(category_specific,n_specific), y = n_specific, fill = method_short)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
ylim(0,15)+
labs(title = "Output Validation: CTAM Scores")+
theme_Publication() + scale_fill_Publication(name = "Method Type") +
theme(legend.direction = "horizontal",legend.position = "right",
legend.key.size= unit(0.8, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank()) -> p_CTAM
ggpubr::ggarrange(p_content, p_human,p_criterion, p_CTAM, p_Robust,nrow=5,
common.legend = TRUE, legend="top",
heights = c(4,
1.8,
2,
2,
3),align = "v") -> plot_validation
ggsave(plot = plot_validation ,filename = "Review/3_plots/output/plot_validation.png",width = 12, height = 12,dpi = 300)
source("C:/Users/birkenls/OneDrive - GESIS – Leibniz-Institut für Sozialwissenschaften e.V/Dokumente/Coding Projekte (Git)/Review_Validity/Review/3_plots/scripts/analysis.R")
df <- readxl::read_xlsx("Review/3_plots/data/Results_final.xlsx") %>%
filter(`E-Mail-Adresse` == "lukas.birkenmaier@outlook.de") %>%
mutate(id = paste(stringr::word(.$`This is the title of the Study`,1),
stringr::word(.$`These are the Authors`,1),sep = "_")) %>%
dplyr::rename(source = `What is the data source?`,
title = `This is the title of the Study`,
language = `What is the data language?`,language_others = `If others: Name all languages in the data? If there is more than one language assessed, please separate languages by a comma (,)` ,
method_type = `What Type(s) of method are initially applied?`,
method_name = `What is the name of the method? If there is more than one method applied, please separate methods by a comma (,)`) %>%
drop_na(source)
df_bib <- readr::read_csv("Review/1_literature_search/data/csv_files/complete_list_coded.csv")
left_join(df,df_bib %>% select(doi, Title, journal, year), by = c("title"="Title")) -> df
#No dublicates
length(unique(df$id)) == nrow(df)
df_validation <- df %>% select(ends_with("_v1"))
df$n_validation <- rowSums(!is.na(df_validation))
df %>%
mutate(across(a_v1:f_v4, as.character)) %>%
pivot_longer(cols = a_v1:f_v4)  %>%
mutate(location = sub('.*(a|b|c|d|e|f).*', '\\1', name),
name  = sub('_?(a|b|c|d|e|f)_?', '', name)) %>%
pivot_wider() -> df_plot
df_time <- readxl::read_xlsx("Review/3_plots/data/search_results_CTAM_publications.xlsx")
df_categories <- readxl::read_xlsx("Review/3_plots/data/Web of Science Categories.xlsx")
df_time %>%
mutate(topic2 = gsub(";.*","",.$topic)) %>%
mutate(cat = case_when(
(topic2 %in% df_categories$`Arts & Humanities`) ~ "Arts & Humanities",
(topic2 %in% df_categories$`Life Sciences & Biomedicine`) ~ "Life Sciences & Biomedicine",
(topic2 %in% df_categories$`Physical Sciences`) ~ "Physical Sciences",
(topic2 %in% df_categories$`Social Sciences`) ~ "Social Sciences",
(topic2 %in% df_categories$Technology) ~ "Technology",
T ~ "No")) %>%
filter(`Publication Year`<= 2021) %>%
count(cat,`Publication Year`) %>%
ggplot() +
geom_area(aes(x = `Publication Year`, y = n, fill = cat), alpha = 0.8)+
xlim(2005,2021)+
labs(y = "Count") +
theme_Publication() +
scale_fill_Publication() -> plot_time
ggsave(plot =plot_time ,filename = "Review/3_plots/output/overview_time.png",width = 12, height = 9,dpi = 300)
df %>%
separate_rows(source,sep = ",") %>% mutate(source = trimws(source)) %>%
mutate(group = case_when(
startsWith(as.character(source),"Party") ~ "Political System",
startsWith(as.character(source),"Social") ~ "Social Media",
startsWith(as.character(source),"News") ~ "Newspaper",
T ~ "Others")) %>%
mutate(source = str_remove_all(source, paste(c("Party Politics: ","Social Media: "), collapse = "|"))) %>%
count(group, source, sort = T) %>%
mutate(source = case_when(
(n == 1) ~ "Others", T ~ source),
group = case_when((source == "Others") ~ "Others",T~group))  -> df1
df1 %>% filter(n == 1) %>% count(group, source) -> df2
rbind(df1 %>% filter(n > 1),df2) %>%
arrange(group,-n) %>%
bind_rows(slice(., 2)) %>% slice(-2) %>%
rowid_to_column() %>%
mutate(source = case_when(
(group == "Others" & source == "Others") ~ "Various (Others)",
(group == "Party Politics" & source == "Others") ~ "Various (Party Politics)",
(group == "Social Media" & source == "Others")  ~ "Various (Social Media)",
T ~ source)) %>%
ggplot(aes(x=reorder(source,-rowid), y = n, fill = group)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_x_discrete(labels = label_wrap(15))+
labs(title = "a) Text Source", y = "n") +
scale_fill_manual(name = "Type",values = c("#ef3b2c","#662506","#a6cee3","#fb9a99"))+
theme_Publication() +
theme(legend.position = "top",legend.direction="horizontal", legend.title = element_text(size = 13,face = "bold"),
axis.title.y = element_blank(),
axis.title.x = element_blank()) -> barchart_source
df %>%
mutate(language_combined = case_when(
language == "English"~ language,
T ~ language_others)) %>%
separate_rows(language_combined,sep = ",") %>% mutate(language_combined = trimws(language_combined)) -> df_temp
df_temp%>%
count(language_combined) %>% left_join(df_temp, ., by = "language_combined") %>%
mutate(language_combined = case_when(
(n > 2) ~ language_combined,
(n <=2) ~ "Others")) |>  nrow()
ggplot(aes(x=reorder(language_combined, table(language_combined)[language_combined]),fill = factor(language_combined))) +
geom_bar() +
coord_flip() +
labs(title = "b) Data Languages",x = "Language", y = "n", fill = "Language") +
theme_Publication()+
scale_fill_Publication()+
theme(axis.title.y = element_blank(),legend.position = "none") -> barchart_language
df %>%
separate_rows(method_type,sep = ",") %>% mutate(method_type = trimws(method_type)) %>%
mutate(method_short = case_when(
startsWith(as.character(method_type),"Super") ~ "Supervised",
startsWith(as.character(method_type),"Unsuper") ~ "Unsupervised",
startsWith(as.character(method_type),"Rule") ~ "Dictionary",
T ~ NA_character_)) %>%
count(method_short,construct_new) %>%
drop_na(method_short) %>%
ggplot(aes(method_short,construct_new, fill= n)) +
geom_tile() +
geom_text(aes(label = n),size = 4,fontface  = "bold",color = "white")+
labs(title = "c) Construct and Method Type", fill = "n") +
theme_Publication() + scale_fill_gradient2()+
scale_x_discrete(labels = label_wrap(15))+
scale_y_discrete(labels = label_wrap(20))+
theme(legend.direction = "vertical",legend.position = "right",
legend.key.size= unit(0.5, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank())  -> tile_type_topic
ggpubr::ggarrange(ggpubr::ggarrange(barchart_source,barchart_language,nrow=2,align = "v",heights = c(1.2,1)),tile_type_topic,nrow = 1) -> souce_overview
ggsave(plot =souce_overview ,filename = "Review/3_plots/output/overview_descriptive.png",width = 12, height = 9,dpi = 300)
#Calculating Percetages of Method Type
##Note: There might be more than one
df %>%
separate_rows(method_type,sep = ",") %>%
mutate(method_type = trimws(method_type)) %>%
mutate(method_short = case_when(
startsWith(as.character(method_type),"Super") ~ "Supervised",
startsWith(as.character(method_type),"Unsuper") ~ "Unsupervised",
startsWith(as.character(method_type),"Rule") ~ "Dictionary",
T ~ NA_character_)) %>%
group_by(method_short) %>%
summarise(share = n()/nrow(df),
n = n())
df %>%
separate_rows(method_type,sep = ",") %>%
mutate(method_type = trimws(method_type)) %>%
mutate(method_short = case_when(
startsWith(as.character(method_type),"Super") ~ "Supervised",
startsWith(as.character(method_type),"Unsuper") ~ "Unsupervised",
startsWith(as.character(method_type),"Rule") ~ "Dictionary",
T ~ NA_character_)) %>%
select(method_type, method_short) %>%
filter(is.na(method_short))
df %>%
rename(link = `Is there a link to an Appendix/additional Materials/GitHub repository?`) %>%
count(link)
ggplot(aes(x=link,fill = link)) +
geom_bar()+
labs(title = "Replication Materials available?",) +
theme_Publication() + scale_fill_Publication() +
theme(axis.title.y = element_blank(), legend.position = "none",axis.title.x = element_blank())
ggsave("Review/3_plots/output/replication.png", width = 8, height = 8)
df %>%
rename(link = `Is there a link to an Appendix/additional Materials/GitHub repository?`) %>%
mutate(link = case_when((link == "Yes")~1,T ~0)) %>%
group_by(year) %>%
summarise(n = n(),percent = sum(link)/n(),sd = sd(link)) %>%
filter(year >2017) %>%
ggplot(aes(x=year,y = percent,label = n)) +
geom_line() +
geom_text(vjust=-2)+
geom_point() +
theme_Publication()
df_plot %>%
separate_rows(method_type,sep = ",") %>%
mutate(method_type = trimws(method_type)) %>%
distinct(id, n_validation, method_type) %>%
group_by(id) %>% mutate(count_methods = n()) %>% ungroup() %>%
mutate(n_validation_adjusted = n_validation/count_methods) %>% #Calculating the mean number of validation steps for each paper adjusted for the amount of methods applied
distinct(id, n_validation,n_validation_adjusted,count_methods,method_type) -> df_n_validation
df_n_validation %>%
distinct(id, n_validation) %>%
count(n_validation) #14 studies without validation -> 14/96 = 14,6%
df_n_validation %>%
distinct(id,n_validation_adjusted) %>%
ggplot(aes(x=as.character(round(n_validation_adjusted)),fill = factor(round(n_validation_adjusted)))) +
geom_bar()+
labs(title = "a) Distribution of Validation Steps", y = "n", fill = "Number of Validation Steps") +
theme_Publication() + scale_fill_Publication() +
theme(axis.title.y = element_blank(),
legend.position = "none",
axis.title.x = element_blank()) -> n_validation_bar
df_n_validation %>%
distinct(id,n_validation_adjusted) %>%
ggplot(aes(x=as.character(round(n_validation_adjusted)),fill = factor(round(n_validation_adjusted)))) +
geom_bar()+
labs(title = "a) Distribution of Validation Steps", y = "n", fill = "Number of Validation Steps") +
theme_Publication() + scale_fill_Publication() +
theme(axis.title.y = element_blank(),
legend.position = "none",
axis.title.x = element_blank()) -> n_validation_bar
df_n_validation %>%
mutate(method_short = case_when(
startsWith(as.character(method_type),"Super") ~ "Supervised",
startsWith(as.character(method_type),"Unsuper") ~ "Unsupervised",
startsWith(as.character(method_type),"Rule") ~ "Dictionary",
T ~ NA_character_)) %>%
filter(count_methods == 1) %>%
count(method_short,n_validation) %>%
drop_na(method_short) %>%
ggplot(aes(method_short,as.character(n_validation), fill= n)) +
geom_tile() +
geom_text(aes(label = n),size = 4,fontface  = "bold",color = "white")+
labs(title = "b) Distribution of Validation Steps per Method Type",fill = "Count") +
theme_Publication() + scale_fill_gradient2(breaks = c(seq(1,9,1))) +
scale_x_discrete(labels = label_wrap(15))+
scale_y_discrete(labels = label_wrap(20))+
theme(legend.direction = "vertical",legend.position = "right",
legend.key.size= unit(0.8, "cm"),
axis.title.x = element_blank(),
axis.title.y = element_blank()) -> n_validation_method_heatmap
ggpubr::ggarrange(n_validation_bar,
n_validation_method_heatmap,
heights = c(6, 10),
nrow=2) -> n_validation_overview
ggsave(plot = n_validation_overview ,filename = "Review/3_plots/n_validation_overvietw.png",width = 9, height = 8,dpi = 300)
df_qual <- readxl::read_xlsx("Review/3_plots/data/Qualitative_Evaluation_Validation_Steps.xlsx") %>%
select(method_short	,category_general,category_specific,	validity_type_paper,Text_Long,Description_informal
)
df_qual %>%
count(category_general,method_short) %>%
drop_na(category_general) |>
ggplot(aes(x=reorder(category_general,n), y = n, fill = method_short)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
theme_Publication() + scale_fill_Publication(name = "Method Type") +
theme(legend.direction = "vertical",legend.position = "right",
legend.key.size= unit(0.8, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank())
df_qual %>%
count(category_general,method_short) %>%
drop_na(category_general) |>
ggplot(aes(x=reorder(category_general,n), y = n, fill = method_short)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
theme_Publication() + scale_fill_Publication(name = "Method Type") +
theme(legend.direction = "vertical",legend.position = "right",
legend.key.size= unit(0.8, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank()) -> plot_validation_general
df_qual %>%
count(category_general,method_short) %>%
drop_na(category_general) |>
ggplot(aes(x=reorder(category_general,n), y = n, fill = method_short)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
theme_Publication() + scale_fill_Publication(name = "Method Type") +
theme(legend.direction = "vertical",legend.position = "right",
legend.key.size= unit(0.8, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank()) -> plot_validation_general
ggsave(plot = plot_validation_general ,filename = "Review/3_plots/output/plot_validation_general.png",width = 12, height = 12,dpi = 300)
ggsave(plot = plot_validation_general ,filename = "Review/3_plots/output/plot_validation_general.png",width = 12, height = 9,dpi = 300)
ggsave(plot = plot_validation_general ,filename = "Review/3_plots/output/plot_validation_general.png",width = 12, height = 7,dpi = 300)
df_qual %>%
count(category_general,method_short)
df_qual %>%
count(category_general)
df_qual %>%
count(category_general,method_short) %>%
drop_na(category_general) |>
ggplot(aes(x=reorder(category_general,n), y = n, fill = method_short)) +
geom_bar(position="stack", stat="identity")
df_qual %>%
count(category_general,method_short) %>%
drop_na(category_general) |>
ggplot(aes(x=reorder(category_general,n), y = n, fill = method_short)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
theme_Publication() + scale_fill_Publication(name = "Method Type") +
theme(legend.direction = "vertical",legend.position = "right",
legend.key.size= unit(0.8, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank()) -> plot_validation_general
ggsave(plot = plot_validation_general ,filename = "Review/3_plots/output/plot_validation_general.png",width = 12, height = 7,dpi = 300)
df_qual %>%
count(category_general,method_short) %>%
drop_na(category_general)
df_qual %>%
count(category_general,method_short) %>%
drop_na(category_general) |> group_by(category_general) |> mutate(count_total = sum(n))
df_qual %>%
count(category_general,method_short) %>%
drop_na(category_general) |> group_by(category_general) |> mutate(count_total = sum(n)) |>
ggplot(aes(x=reorder(category_general,count_total), y = n, fill = method_short)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
theme_Publication() + scale_fill_Publication(name = "Method Type") +
theme(legend.direction = "vertical",legend.position = "right",
legend.key.size= unit(0.8, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank()) -> plot_validation_general
df_qual %>%
count(category_general,method_short) %>%
drop_na(category_general) |> group_by(category_general) |> mutate(count_total = sum(n)) |>
ggplot(aes(x=reorder(category_general,count_total), y = n, fill = method_short)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
theme_Publication() + scale_fill_Publication(name = "Method Type") +
theme(legend.direction = "vertical",legend.position = "right",
legend.key.size= unit(0.8, "cm"),
axis.title.y = element_blank(),
axis.title.x = element_blank()) -> plot_validation_general
ggsave(plot = plot_validation_general ,filename = "Review/3_plots/output/plot_validation_general.png",width = 12, height = 7,dpi = 300)
ggpubr::ggarrange(p_human,p_content, p_criterion, p_CTAM, p_Robust,nrow=5,
common.legend = TRUE, legend="top",
heights = c(1.8,
4,
2,
2,
3),align = "v") -> plot_validation
ggsave(plot = plot_validation ,filename = "Review/3_plots/output/plot_validation.png",width = 12, height = 12,dpi = 300)
df_qual %>%
count(category_general)
spin('Your_Filename.Rmd', knit = FALSE)
knitr::spin()
knitr::spin('Your_Filename.Rmd', knit = FALSE)
knitr::spin('Exercise 1.2 - Variables and arithmetic.R', knit = FALSE)
getwd()
